// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Board {
  id                String @id @default(uuid())
  orgId             String
  title             String
  imageId           String
  imageThumbUrl     String @db.Text
  imageFullUrl      String @db.Text
  imageUserName     String @db.Text
  imageLinkHTML     String @db.Text


  lists             List[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id                String @id @default(uuid())
  title             String
  order             Int

  cards             Card[]
  
  boardId           String
  board             Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}


model Card {
  id                String @id @default(uuid())
  title             String
  order             Int
  description       String? @db.Text



  listId            String
  list              List @relation(fields: [listId] , references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}


enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id            String @id @default(uuid())
  orgId         String
  action        ACTION
  entityId      String
  entityType    ENTITY_TYPE
  entityTitle   String
  userId        String
  userImage     String @db.Text
  userName      String @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OrgLimit {
  id            String  @id @default(uuid())
  orgId         String  @unique
  count         Int     @default(0)   

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model orgSubscription {
  id                        String   @id @default(uuid())
  orgId                     String?   @unique

  paystackCustomerId        Int?  @unique @map(name: "paystack_customer_id")
  paystackCustomerCode      String? @unique
  paystackSubscriptionId    String?  @unique @map(name: "paystack_subscription_id")
  paystackPlanId            Int?  @map(name: "paystack_plan_id")
  invoiceLimit              Int?
  paystackCurrentPeriodEnd  DateTime? @map(name: "paystack_current_period_end")

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}